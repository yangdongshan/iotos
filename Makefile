

ifeq ($(V),)
	Q = @
else
	Q :=
endif
export Q


ROOTDIR = $(shell pwd)
export ROOTDIR

SCRIPTSDIR = $(ROOTDIR)/scripts
export SCRIPTSDIR

# include system .config which is generated by make menuconfig
-include .config

# include config
include $(SCRIPTSDIR)/config.mk

# include  tool chain
include $(SCRIPTSDIR)/toolchain.mk

PROJNAME ?= CONFIG_PROJECT_NAME 

KCONFIGDIR = $(ROOTDIR)/kconfig
KCONFIGFILE = $(ROOTDIR)/Kconfig


CFLAGS += -include $(ROOTDIR)/include/generated/autoconf.h

ARFLAGS +=

LDFLAGS +=


LINKER_LD := $(ROOTDIR)/boot/linker.ld
GRUB_CFG := $(ROOTDIR)/tools/grub.cfg

ARCH_INCLUDE := arch/include
ARCH_SRCDIR := arch/src
ARCH_BOOTDIR := arch/boot

LIBDIR := $(ARCH_SRCDIR) \
		  init \
		  kernel \
		  libc

LIBS = $(addprefix $(ROOTDIR)/,$(foreach dir, $(LIBDIR), $(dir)/lib$(dir).a))
export LIBS

LDDIR += $(addprefix -L$(ROOTDIR)/,$(LIBDIR))
LDLIB += $(addprefix -l,$(LIBDIR))
export LDDIR
export LDLIB

export CFLAGS
export ARFLAGS
export LDFLAGS

CONFIG_CHIP:=$(patsubst "%",%,$(strip $(CONFIG_CHIP)))

ELF=$(ROOTDIR)/$(PROJNAME).elf

all: $(ELF)

$(ELF): link_dir lib
	#$(Q) $(MAKE) -C $(ARCH_BOOTDIR) binary elf=$@ linker_file=$(LINKER_LD)

link_dir:
	$(Q) if [ ! -e $(ARCH_SRCDIR) ]; then cp -vr arch/$(CONFIG_CHIP)/src $(ARCH_SRCDIR); fi
	$(Q) if [ ! -e $(ARCH_BOOTDIR) ]; then cp -vr arch/$(CONFIG_CHIP)/boot $(ARCH_BOOTDIR); fi
	$(Q) if [ ! -e $(ARCH_INCLUDE) ]; then cp -vr arch/$(CONFIG_CHIP)/boot $(ARCH_INCLUDE); fi

lib: $(LIBDIR)
	$(Q) $(foreach dir, $(LIBDIR), \
		$(MAKE) -C $(dir) obj || exit "$$?";\
		$(MAKE) -C $(dir) lib libname=lib$(dir).a || exit "$$?";)


.PHONY: menuconfig distclean silentoldconfig clean launch_qemu download

menuconfig: $(KCONFIGDIR)/mconf $(KCONFIGDIR)/conf
	$(Q) $< -s $(KCONFIGFILE)
	$(Q) $(MAKE) silentoldconfig

$(KCONFIGDIR)/mconf:
	$(Q) $(MAKE) -C $(KCONFIGDIR)

silentoldconfig: $(KCONFIGDIR)/conf
	$(Q) mkdir -p include/generated include/config
	$(Q) $< -s --silentoldconfig $(KCONFIGFILE)

clean:
	$(Q) $(foreach dir, $(ARCH_BOOTDIR) $(LIBDIR), $(MAKE) -C $(dir) clean || exit "$$?";)
	$(Q) -rm -f $(ELF) $(ISO)

distclean: clean
	$(Q) $(MAKE) -C $(KCONFIGDIR) clean
	$(Q) rm -rf $(ARCH_SRCDIR) $(ARCH_BOOTDIR) $(ARCH_INCLUDE)
	$(Q) rm -rf include/generated include/config .config

launch_qemu: $(ISO)
	$(Q) $(QEMU) -cdrom $(ISO) -nographic #-enable-kvm

download:
	$(Q) st-flash 
